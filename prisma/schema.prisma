// This is your Prisma schema file for MongoDB
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// ===== AUTHENTICATION & USER MODELS =====

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Role {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  displayName  String // Human-readable name (e.g., "Store Manager")
  roleName     String       @unique // System name (e.g., "store_manager")
  organisation Organisation @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId        String       @db.ObjectId
  description  String?
  permissions  String[] // Array of permission strings
  users        User[]       @relation("UserRoles", fields: [userIds], references: [id])
  userIds      String[]     @db.ObjectId
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

}

model User {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  firstName     String
  lastName      String
  phone         String       @unique
  email         String       @unique
  emailVerified DateTime?
  image         String?
  jobTitle      String?
  roles         Role[]       @relation("UserRoles", fields: [roleIds], references: [id])
  roleIds       String[]     @db.ObjectId
  password      String?
  status        Boolean      @default(true)
  accounts      Account[]
  sessions      Session[]
  orgName       String?
  organisation  Organisation @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId         String       @db.ObjectId
  location      Location?    @relation(fields: [locationId], references: [id])
  locationId    String?      @db.ObjectId
  locationName  String?
  isVerfied     Boolean      @default(false)
  token         String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  roleId        String?      @db.ObjectId

  // Relationships for transactions
  createdPurchaseOrders  PurchaseOrder[] @relation("PurchaseOrderCreatedBy")
  approvedPurchaseOrders PurchaseOrder[] @relation("PurchaseOrderApprovedBy")
  createdTransfers       Transfer[]      @relation("TransferCreatedBy")
  approvedTransfers      Transfer[]      @relation("TransferApprovedBy")
  createdSalesOrders     SalesOrder[]    @relation("SalesOrderCreatedBy")
  createdAdjustments     Adjustment[]    @relation("AdjustmentCreatedBy")
  approvedAdjustments    Adjustment[]    @relation("AdjustmentApprovedBy")
  receivedGoodsReceipts  GoodsReceipt[]  @relation("GoodsReceiptReceivedBy")
}

model Organisation {
  id                 String          @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  slug               String          @unique
  industry           String?
  country            String?
  state              String?
  address            String?
  currency           String?
  timezone           String?
  inventoryStartDate DateTime?
  fiscalYear         String?
  users              User[]
  invites            Invite[]
  roles              Role[]
  locations          Location[]
  inventory          Inventory[]
  items              Item[]
  categories         Category[]
  brands             Brand[]
  units              Unit[]
  taxRates           TaxRate[]
  suppliers          Supplier[]
  purchaseOrders     PurchaseOrder[]
  salesOrders        SalesOrder[]
  transfers          Transfer[]
  adjustments        Adjustment[]
  customers          Customer[]
  goodsReceipts      GoodsReceipt[]
  apiKeys            ApiKey[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("organisations")
}

model Invite {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  email        String       @unique
  organisation Organisation @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId        String       @db.ObjectId
  status       Boolean      @default(false)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@map("invites")
}

model ApiKey {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  orgId     String       @db.ObjectId
  key       String       @unique
  name      String
  createdAt DateTime     @default(now())
  org       Organisation @relation(fields: [orgId], references: [id])
}

// ===== LOCATION MODEL =====

model Location {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  type         LocationType
  address      String?
  phone        String?
  email        String?
  isActive     Boolean      @default(true)
  organisation Organisation @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId        String       @db.ObjectId
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  // Relationships
  users             User[]
  inventories       Inventory[]
  incomingTransfers Transfer[]      @relation("ToLocation")
  outgoingTransfers Transfer[]      @relation("FromLocation")
  purchaseOrders    PurchaseOrder[] @relation("DeliveryLocation")
  salesOrders       SalesOrder[]    @relation("SalesLocation")
  goodsReceipts     GoodsReceipt[]
  adjustments       Adjustment[]
}

enum LocationType {
  WAREHOUSE
  SHOP
  VIRTUAL
}

// ===== PRODUCT CATALOG MODELS =====

model Category {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  slug          String       @unique
  imageUrl      String?
  description   String?
  parentId      String?      @db.ObjectId
  parent        Category?    @relation("SubCategories", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subCategories Category[]   @relation("SubCategories")
  items         Item[]
  organisation  Organisation @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId         String       @db.ObjectId
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Unit {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  symbol       String
  items        Item[]
  organisation Organisation @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId        String       @db.ObjectId
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Brand {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  slug         String       @unique
  items        Item[]
  organisation Organisation @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId        String       @db.ObjectId
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model TaxRate {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  rate         Float
  items        Item[]
  organisation Organisation @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId        String       @db.ObjectId
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Item {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  slug            String       @unique
  sku             String       @unique
  barcode         String?      @unique
  description     String?
  dimensions      String?
  weight          Float?
  salesCount      Int          @default(0)
  salesTotal      Float        @default(0)
  upc             String? //Twelve digit unique number associated with the bar code (Universal Product Code)
  ean             String? //Thirteen digit unique number (International Article Number)
  mpn             String? //Manufacturing Part Number unambiguously identifies a part design
  isbn            String? //Thirteen digit unique commercial book identifier (International Standard Book Number)
  categoryId      String?      @db.ObjectId
  thumbnail       String?      @default("https://14j7oh8kso.ufs.sh/f/HLxTbDBCDLwfAXaapcezIN7vwylkF1PXSCqAuseUG0gx8mhd")
  imageUrls       String[]
  category        Category?    @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction )
  taxRateId       String?      @db.ObjectId
  tax             Float? //tax rate
  taxRate         TaxRate?     @relation(fields: [taxRateId], references: [id])
  brandId         String?      @db.ObjectId
  brand           Brand?       @relation(fields: [brandId], references: [id])
  unitId          String?      @db.ObjectId
  unit            Unit?        @relation(fields: [unitId], references: [id], onDelete: Cascade)
  unitOfMeasure   String? //unit name
  costPrice       Float        @default(0)
  sellingPrice    Float        @default(0)
  minStockLevel   Int          @default(0)
  maxStockLevel   Int?
  isActive        Boolean      @default(true)
  isSerialTracked Boolean      @default(false)
  organisation    Organisation @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId           String       @db.ObjectId
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  // Relationships
  inventories        Inventory[]
  serialNumbers      SerialNumber[]
  supplierIds        String[]         @db.ObjectId
  suppliers          Supplier[]       @relation("SupplierItems", fields: [supplierIds], references: [id])
  supplierRelations  ItemSupplier[]
  purchaseOrderLines PurchaseOrderLine[]
  salesOrderLines    SalesOrderLine[]
  transferLines      TransferLine[]
  adjustmentLines    AdjustmentLine[]
  goodsReceiptLines  GoodsReceiptLine[]
}

// ===== SUPPLIER MODELS =====

model Supplier {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  contactPerson String?
  email         String?
  phone         String?
  address       String?
  taxId         String?
  paymentTerms  Int? // Days
  notes         String?
  isActive      Boolean      @default(true)
  organisation  Organisation @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId         String       @db.ObjectId
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  // Relationships
  itemIds           String[]      @db.ObjectId
  items             Item[]        @relation("SupplierItems", fields: [itemIds], references: [id])
  supplierRelations ItemSupplier[]
  purchaseOrders    PurchaseOrder[]
}

model ItemSupplier {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  itemId           String    @db.ObjectId
  item             Item      @relation(fields: [itemId], references: [id])
  supplierId       String    @db.ObjectId
  supplier         Supplier  @relation(fields: [supplierId], references: [id])
  isPreferred      Boolean   @default(false)
  supplierSku      String? // Supplier's own SKU for this item
  leadTime         Int? // Typical lead time in days
  minOrderQty      Int? // Minimum order quantity
  unitCost         Float? // Supplier-specific cost
  lastPurchaseDate DateTime?
  notes            String?

  @@unique([itemId, supplierId])
}

// ===== INVENTORY MODELS =====

model Inventory {
  id               String       @id @default(auto()) @map("_id") @db.ObjectId
  itemId           String       @db.ObjectId
  item             Item         @relation(fields: [itemId], references: [id])
  locationId       String       @db.ObjectId
  location         Location     @relation(fields: [locationId], references: [id])
  quantity         Int          @default(0)
  reservedQuantity Int          @default(0)
  organisation     Organisation @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId            String       @db.ObjectId
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  @@unique([itemId, locationId])
}

model SerialNumber {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  serialNumber    String       @unique
  itemId          String       @db.ObjectId
  item            Item         @relation(fields: [itemId], references: [id])
  status          SerialStatus @default(IN_STOCK)
  locationId      String?      @db.ObjectId
  purchaseOrderId String?      @db.ObjectId
  salesOrderId    String?      @db.ObjectId
  notes           String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

enum SerialStatus {
  IN_STOCK
  SOLD
  RESERVED
  DAMAGED
  RETURNED
}

// ===== PURCHASE MODELS =====

model PurchaseOrder {
  id                   String              @id @default(auto()) @map("_id") @db.ObjectId
  poNumber             String              @unique
  date                 DateTime
  supplierId           String              @db.ObjectId
  supplierName         String?
  supplier             Supplier            @relation(fields: [supplierId], references: [id])
  deliveryLocationId   String              @db.ObjectId
  deliveryLocation     Location            @relation("DeliveryLocation", fields: [deliveryLocationId], references: [id])
  status               PurchaseOrderStatus @default(DRAFT)
  subtotal             Float               @default(0)
  taxAmount            Float               @default(0)
  shippingCost         Float?
  discount             Float?
  total                Float               @default(0)
  notes                String?
  paymentTerms         String?
  expectedDeliveryDate DateTime?
  organisation         Organisation        @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId                String              @db.ObjectId
  createdById          String              @db.ObjectId
  createdBy            User                @relation("PurchaseOrderCreatedBy", fields: [createdById], references: [id])
  approvedById         String?             @db.ObjectId
  approvedBy           User?               @relation("PurchaseOrderApprovedBy", fields: [approvedById], references: [id])
  lines                PurchaseOrderLine[]
  goodsReceipts        GoodsReceipt[]
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt

}

enum PurchaseOrderStatus {
  DRAFT
  SUBMITTED
  APPROVED
  PARTIALLY_RECEIVED
  RECEIVED
  CANCELLED
  CLOSED
}

model PurchaseOrderLine {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  purchaseOrderId   String             @db.ObjectId
  purchaseOrder     PurchaseOrder      @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
  itemId            String             @db.ObjectId
  item              Item               @relation(fields: [itemId], references: [id])
  quantity          Int
  unitPrice         Float
  taxRate           Float              @default(0)
  taxAmount         Float              @default(0)
  discount          Float?
  total             Float
  notes             String?
  receivedQuantity  Int                @default(0)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  goodsReceiptLines GoodsReceiptLine[]

}

model GoodsReceipt {
  id              String             @id @default(auto()) @map("_id") @db.ObjectId
  receiptNumber   String             @unique
  date            DateTime
  purchaseOrderId String             @db.ObjectId
  purchaseOrder   PurchaseOrder      @relation(fields: [purchaseOrderId], references: [id])
  locationId      String             @db.ObjectId
  location        Location           @relation(fields: [locationId], references: [id])
  status          GoodsReceiptStatus @default(PENDING)
  notes           String?
  organisation    Organisation       @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId           String             @db.ObjectId
  receivedById    String             @db.ObjectId
  receivedBy      User               @relation("GoodsReceiptReceivedBy", fields: [receivedById], references: [id])
  lines           GoodsReceiptLine[]
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

}

enum GoodsReceiptStatus {
  PENDING
  COMPLETED
  CANCELLED
}

model GoodsReceiptLine {
  id                  String            @id @default(auto()) @map("_id") @db.ObjectId
  goodsReceiptId      String            @db.ObjectId
  goodsReceipt        GoodsReceipt      @relation(fields: [goodsReceiptId], references: [id], onDelete: Cascade)
  purchaseOrderLineId String            @db.ObjectId
  purchaseOrderLine   PurchaseOrderLine @relation(fields: [purchaseOrderLineId], references: [id])
  itemId              String            @db.ObjectId
  item                Item              @relation(fields: [itemId], references: [id])
  receivedQuantity    Int
  notes               String?
  serialNumbers       String[] // Array of serial numbers for serialized items
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

}

// ===== SALES MODELS =====

model Customer {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String?
  phone        String?
  address      String?
  taxId        String?
  notes        String?
  isActive     Boolean      @default(true)
  organisation Organisation @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId        String       @db.ObjectId
  salesOrders  SalesOrder[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

}

model SalesOrder {
  id            String           @id @default(auto()) @map("_id") @db.ObjectId
  orderNumber   String           @unique
  date          DateTime
  customerId    String?          @db.ObjectId
  source        Source           @default(SALES_ORDER)
  customer      Customer?        @relation(fields: [customerId], references: [id])
  locationId    String           @db.ObjectId
  location      Location         @relation("SalesLocation", fields: [locationId], references: [id])
  status        SalesOrderStatus @default(DRAFT)
  subtotal      Float            @default(0)
  taxAmount     Float            @default(0)
  shippingCost  Float?
  discount      Float?
  total         Float            @default(0)
  paymentStatus PaymentStatus    @default(PENDING)
  paymentMethod String?
  notes         String?
  organisation  Organisation     @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId         String           @db.ObjectId
  createdById   String           @db.ObjectId
  createdBy     User             @relation("SalesOrderCreatedBy", fields: [createdById], references: [id])
  lines         SalesOrderLine[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

}

enum SalesOrderStatus {
  DRAFT
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  COMPLETED
  CANCELLED
  RETURNED
}

enum Source {
  POS
  SALES_ORDER
}

enum PaymentStatus {
  PENDING
  PARTIAL
  PAID
  REFUNDED
}

model SalesOrderLine {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  salesOrderId  String     @db.ObjectId
  salesOrder    SalesOrder @relation(fields: [salesOrderId], references: [id], onDelete: Cascade)
  itemId        String     @db.ObjectId
  item          Item       @relation(fields: [itemId], references: [id])
  quantity      Int
  unitPrice     Float
  taxRate       Float      @default(0)
  taxAmount     Float      @default(0)
  discount      Float?
  total         Float
  serialNumbers String[] // Array of serial numbers for serialized items
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

}

// ===== STOCK MOVEMENT MODELS =====

model Transfer {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  transferNumber String         @unique
  date           DateTime
  fromLocationId String         @db.ObjectId
  fromLocation   Location       @relation("FromLocation", fields: [fromLocationId], references: [id])
  toLocationId   String         @db.ObjectId
  toLocation     Location       @relation("ToLocation", fields: [toLocationId], references: [id])
  status         TransferStatus @default(DRAFT)
  notes          String?
  organisation   Organisation   @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId          String         @db.ObjectId
  createdById    String         @db.ObjectId
  createdBy      User           @relation("TransferCreatedBy", fields: [createdById], references: [id])
  approvedById   String?        @db.ObjectId
  approvedBy     User?          @relation("TransferApprovedBy", fields: [approvedById], references: [id])
  lines          TransferLine[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

}

enum TransferStatus {
  DRAFT
  APPROVED
  IN_TRANSIT
  COMPLETED
  CANCELLED
}

model TransferLine {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  transferId    String   @db.ObjectId
  transfer      Transfer @relation(fields: [transferId], references: [id], onDelete: Cascade)
  itemId        String   @db.ObjectId
  item          Item     @relation(fields: [itemId], references: [id])
  quantity      Int
  notes         String?
  serialNumbers String[] // Array of serial numbers for serialized items
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

}

model Adjustment {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  adjustmentNumber String           @unique
  date             DateTime
  locationId       String           @db.ObjectId
  location         Location         @relation(fields: [locationId], references: [id])
  adjustmentType   AdjustmentType
  reason           String
  notes            String?
  status           AdjustmentStatus @default(DRAFT)
  organisation     Organisation     @relation(fields: [orgId], references: [id], onDelete: Cascade)
  orgId            String           @db.ObjectId
  createdById      String           @db.ObjectId
  createdBy        User             @relation("AdjustmentCreatedBy", fields: [createdById], references: [id])
  approvedById     String?          @db.ObjectId
  approvedBy       User?            @relation("AdjustmentApprovedBy", fields: [approvedById], references: [id])
  lines            AdjustmentLine[]
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

}

enum AdjustmentType {
  STOCK_COUNT
  DAMAGE
  THEFT
  EXPIRED
  WRITE_OFF
  CORRECTION
  OTHER
}

enum AdjustmentStatus {
  DRAFT
  APPROVED
  COMPLETED
  CANCELLED
}

model AdjustmentLine {
  id               String     @id @default(auto()) @map("_id") @db.ObjectId
  adjustmentId     String     @db.ObjectId
  adjustment       Adjustment @relation(fields: [adjustmentId], references: [id], onDelete: Cascade)
  itemId           String     @db.ObjectId
  item             Item       @relation(fields: [itemId], references: [id])
  beforeQuantity   Int
  afterQuantity    Int
  adjustedQuantity Int // Can be positive (increase) or negative (decrease)
  notes            String?
  serialNumbers    String[] // Array of serial numbers for serialized items
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt

}